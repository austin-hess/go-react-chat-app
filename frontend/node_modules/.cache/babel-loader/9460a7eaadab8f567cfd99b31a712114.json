{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/austinhess/Development/projects/go-react/frontend/src/components/ChatApp/ChatApp.jsx\";\nimport React, { Component } from 'react';\nimport './ChatApp.scss'; // import components\n\nimport ChatroomList from '../ChatroomList';\nimport ChatWindow from '../ChatWindow'; // import backend services\n\nimport ChatroomAPI from '../../api/ChatroomAPI';\nimport ChatroomConnection from '../../api/ChatroomConnection';\n\nclass ChatApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      roomConnections: new Map()\n    };\n    this.handleRoomSelect = this.handleRoomSelect.bind(this);\n    this.createNewChatroom = this.createNewChatroom.bind(this);\n  }\n\n  componentDidMount() {\n    ChatroomAPI.getAvailableChatrooms().then(response => {\n      console.log(`Received existing rooms: ${response.roomIds}`);\n      let roomConnections = new Map();\n      response.roomIds.forEach(id => {\n        roomConnections.set(id, new ChatroomConnection(id));\n      });\n      this.setState({\n        roomConnections\n      });\n    });\n  }\n\n  handleRoomSelect(event) {\n    this.setState({\n      activeChatWindow: event.target.value\n    });\n  }\n\n  createNewChatroom() {\n    ChatroomAPI.createChatroom().then(response => {\n      this.setState(prevState => {\n        let roomConnections = Object.assign({}, prevState.roomConnections.set(response, new ChatroomConnection(response)));\n        return {\n          roomConnections\n        };\n      });\n    });\n  }\n\n  render() {\n    console.log(`ActiveChatWindow: ${this.state.activeChatWindow}`);\n    console.log(`RoomConnections: ${JSON.stringify(this.state.roomConnections)}`);\n    const chatWindow = this.state.activeChatWindow ? /*#__PURE__*/_jsxDEV(ChatWindow, {\n      connection: this.state.roomConnections.get(this.state.activeChatWindow)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ChatApp\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.createNewChatroom,\n        children: \"Create New Chatroom\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ChatroomList, {\n        handleRoomSelect: this.handleRoomSelect,\n        chatrooms: this.state.availableChatrooms ? this.state.availableChatrooms : []\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), chatWindow]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ChatApp;","map":{"version":3,"sources":["/Users/austinhess/Development/projects/go-react/frontend/src/components/ChatApp/ChatApp.jsx"],"names":["React","Component","ChatroomList","ChatWindow","ChatroomAPI","ChatroomConnection","ChatApp","constructor","props","state","roomConnections","Map","handleRoomSelect","bind","createNewChatroom","componentDidMount","getAvailableChatrooms","then","response","console","log","roomIds","forEach","id","set","setState","event","activeChatWindow","target","value","createChatroom","prevState","Object","assign","render","JSON","stringify","chatWindow","get","availableChatrooms"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport './ChatApp.scss';\n\n// import components\nimport ChatroomList from '../ChatroomList';\nimport ChatWindow from '../ChatWindow';\n\n// import backend services\nimport ChatroomAPI from '../../api/ChatroomAPI';\nimport ChatroomConnection from '../../api/ChatroomConnection';\n\nclass ChatApp extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            roomConnections: new Map()\n        };\n        this.handleRoomSelect = this.handleRoomSelect.bind(this);\n        this.createNewChatroom = this.createNewChatroom.bind(this);\n    }\n\n    componentDidMount() {\n        ChatroomAPI.getAvailableChatrooms().then(response => {\n            console.log(`Received existing rooms: ${response.roomIds}`);\n            let roomConnections = new Map();\n            response.roomIds.forEach(id => {\n                roomConnections.set(id, new ChatroomConnection(id));\n            });\n            this.setState({ roomConnections });\n        });\n    }\n\n    handleRoomSelect(event) {\n        this.setState({\n            activeChatWindow: event.target.value\n        });\n    }\n\n    createNewChatroom() {\n        ChatroomAPI.createChatroom().then(response => {\n            this.setState(prevState => {\n                let roomConnections = Object.assign({}, prevState.roomConnections.set(response, new ChatroomConnection(response)));\n                return { roomConnections };\n            });\n        });\n    }\n\n    render() {\n        console.log(`ActiveChatWindow: ${this.state.activeChatWindow}`);\n        console.log(`RoomConnections: ${JSON.stringify(this.state.roomConnections)}`);\n        const chatWindow = this.state.activeChatWindow ?\n                        <ChatWindow connection={this.state.roomConnections.get(this.state.activeChatWindow)} /> :\n                        <></>;\n        return (\n            <div className=\"ChatApp\">\n                <button onClick={this.createNewChatroom}>Create New Chatroom</button>\n                <ChatroomList \n                    handleRoomSelect={this.handleRoomSelect}\n                    chatrooms={this.state.availableChatrooms ? this.state.availableChatrooms : []} \n                />\n                {chatWindow}\n            </div>\n        )\n    }\n}\n\nexport default ChatApp;"]},"metadata":{},"sourceType":"module"}