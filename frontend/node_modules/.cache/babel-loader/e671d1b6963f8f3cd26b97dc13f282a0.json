{"ast":null,"code":"class ChatroomConnection {\n  constructor(roomId) {\n    console.log(`Creating connection for room: ${roomId}`);\n    this.setMessageHandler = this.setMessageHandler.bind(this);\n    this.socket = new WebSocket(`ws://localhost:8080/ws/${roomId}`);\n    console.log(\"Attempting Connection...\");\n\n    this.socket.onopen = () => {\n      console.log(\"Successfully connected!\");\n    };\n\n    this.socket.onmessage = msg => {\n      console.log(`Message received: ${JSON.stringify(msg)}`);\n\n      if (this.messageHandler) {\n        this.messageHandler(msg);\n      }\n    };\n\n    this.socket.onclose = event => {\n      console.log(\"Socket closed connection \", event);\n    };\n\n    this.socket.onerror = err => {\n      console.log(\"Socket error: \", err);\n    };\n  }\n\n  setMessageHandler(handler) {\n    this.setState({\n      messageHandler: handler\n    });\n  }\n\n  sendMessage(msg) {\n    console.log(`Sending message: ${msg}`);\n    this.socket.send(msg);\n  }\n\n  end() {\n    // Normal closure\n    this.socket.close(1000);\n  }\n\n}\n\nexport default ChatroomConnection;","map":{"version":3,"sources":["/Users/austinhess/Development/projects/go-react/frontend/src/api/ChatroomConnection/ChatroomConnection.js"],"names":["ChatroomConnection","constructor","roomId","console","log","setMessageHandler","bind","socket","WebSocket","onopen","onmessage","msg","JSON","stringify","messageHandler","onclose","event","onerror","err","handler","setState","sendMessage","send","end","close"],"mappings":"AAAA,MAAMA,kBAAN,CAAyB;AACrBC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAa,iCAAgCF,MAAO,EAApD;AACA,SAAKG,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKC,MAAL,GAAc,IAAIC,SAAJ,CAAe,0BAAyBN,MAAO,EAA/C,CAAd;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;;AACA,SAAKG,MAAL,CAAYE,MAAZ,GAAqB,MAAM;AACvBN,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACH,KAFD;;AAGA,SAAKG,MAAL,CAAYG,SAAZ,GAAyBC,GAAD,IAAS;AAC7BR,MAAAA,OAAO,CAACC,GAAR,CAAa,qBAAoBQ,IAAI,CAACC,SAAL,CAAeF,GAAf,CAAoB,EAArD;;AACA,UAAI,KAAKG,cAAT,EAAyB;AACrB,aAAKA,cAAL,CAAoBH,GAApB;AACH;AACJ,KALD;;AAMA,SAAKJ,MAAL,CAAYQ,OAAZ,GAAuBC,KAAD,IAAW;AAC7Bb,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCY,KAAzC;AACH,KAFD;;AAGA,SAAKT,MAAL,CAAYU,OAAZ,GAAuBC,GAAD,IAAS;AAC3Bf,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8Bc,GAA9B;AACH,KAFD;AAGH;;AAEDb,EAAAA,iBAAiB,CAACc,OAAD,EAAU;AACvB,SAAKC,QAAL,CAAc;AACVN,MAAAA,cAAc,EAAEK;AADN,KAAd;AAGH;;AAEDE,EAAAA,WAAW,CAACV,GAAD,EAAM;AACbR,IAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBO,GAAI,EAApC;AACA,SAAKJ,MAAL,CAAYe,IAAZ,CAAiBX,GAAjB;AACH;;AAEDY,EAAAA,GAAG,GAAG;AACF;AACA,SAAKhB,MAAL,CAAYiB,KAAZ,CAAkB,IAAlB;AACH;;AArCoB;;AAwCzB,eAAexB,kBAAf","sourcesContent":["class ChatroomConnection {\n    constructor(roomId) {\n        console.log(`Creating connection for room: ${roomId}`);\n        this.setMessageHandler = this.setMessageHandler.bind(this);\n        this.socket = new WebSocket(`ws://localhost:8080/ws/${roomId}`);\n        console.log(\"Attempting Connection...\");\n        this.socket.onopen = () => {\n            console.log(\"Successfully connected!\");\n        };\n        this.socket.onmessage = (msg) => {\n            console.log(`Message received: ${JSON.stringify(msg)}`);\n            if (this.messageHandler) {\n                this.messageHandler(msg);\n            }\n        };\n        this.socket.onclose = (event) => {\n            console.log(\"Socket closed connection \", event);\n        };\n        this.socket.onerror = (err) => {\n            console.log(\"Socket error: \", err);\n        };\n    }\n\n    setMessageHandler(handler) {\n        this.setState({\n            messageHandler: handler\n        });\n    }\n\n    sendMessage(msg) {\n        console.log(`Sending message: ${msg}`);\n        this.socket.send(msg);\n    }\n\n    end() {\n        // Normal closure\n        this.socket.close(1000);\n    }\n}\n\nexport default ChatroomConnection;"]},"metadata":{},"sourceType":"module"}